Please add a CRUD blog that allows my client to easily create, read, update, and delete blog posts. I also want to integrate a secure login page to access an admin panel where clients can manage images and logos on the website.

Professional Requirements:
CRUD Blog Functionality:

Define a robust blog post model with attributes such as id, title, content, author, createdAt, and updatedAt.
Implement well-structured API endpoints using Express.js for:
Creating a new blog post (POST /api/blog).
Reading all blog posts (GET /api/blog).
Updating a blog post by id (PUT /api/blog/:id).
Deleting a blog post by id (DELETE /api/blog/:id).
Ensure thorough data validation for creating and updating posts to prevent inconsistent data.
Secure Login Page:

Design a clean and professional login page using existing UI components such as Button and Avatar.
Implement strong authentication logic using secure hashing (e.g., bcrypt) and token management (e.g., jsonwebtoken).
Create a secure login endpoint (POST /api/login) that validates credentials and allows redirection to the admin section for authorized users.
Protect sensitive admin routes, ensuring that only authenticated users can access functionalities to update images or logos.
Admin Functionality:

Develop user-friendly features for uploading and managing images/logos with a dedicated endpoint (POST /api/upload-logo).
Ensure all admin functionalities maintain a professional interface consistent with the overall design of the application.
User Interface:

Utilize a responsive design that works seamlessly across devices. Apply consistent branding through the theme defined in theme.json.
Provide real-time feedback for all CRUD actions with user-friendly notifications.
Leverage existing UI components like the carousel in carousel.tsx to enhance the user experience.
Security Measures:

Implement input validation both on the client side and server side to prevent vulnerabilities such as SQL injections and XSS attacks.
Use environment variables to manage sensitive data (like API keys) securely.
Deployment Considerations:

The application will be deployed on Replit. Structure the code to support easy deployment while following Replit's best practices.
Consider using private deployment options for sensitive projects, ensuring that only authorized users can access the site.
Implementation Details:
Favor TypeScript for type safety and validation.
Ensure all development follows security best practices, particularly concerning user data management.